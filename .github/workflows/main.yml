name: FanCode SDET Tests

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to test (leave empty for all)'
        required: false
        default: ''
        type: string
      run_security_scan:
        description: 'Run security scan'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Debug - List workspace structure
      run: |
        echo "Current directory:"
        pwd
        echo "Directory structure:"
        find . -name "*.py" -type f | head -20
        echo "Test directories:"
        find . -name "*test*" -type d
        
    - name: Run smoke tests
      run: |
        pytest -v -m smoke --html=reports/smoke-report.html --self-contained-html || echo "No smoke tests found or failed"

    - name: Run all tests
      run: |
        pytest -v --junitxml=reports/junit-report.xml --html=reports/full-report.html --self-contained-html
      continue-on-error: true

    - name: List reports directory (debug)
      run: |
        echo "Reports directory contents:"
        ls -la reports/ || echo "No reports directory found"
        echo "Looking for test files:"
        find . -name "test_*.py" -o -name "*_test.py" | head -10

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-python-${{ matrix.python-version }}
        path: |
          reports/
          *.log
        retention-days: 30

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always() && hashFiles('reports/junit-report.xml') != ''
      with:
        name: Test Results (Python ${{ matrix.python-version }})
        path: reports/junit-report.xml
        reporter: java-junit
        fail-on-error: false
      continue-on-error: true

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    if: success() || failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Build Docker image
      run: |
        docker build -t fancode-sdet:latest .
        
    - name: Run tests in Docker
      run: |
        docker run --rm -v $(pwd)/reports:/app/reports fancode-sdet:latest
      continue-on-error: true
        
    - name: Upload Docker test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-test-reports
        path: reports/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o security-report.json -ll || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.json
        retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [test, docker-test, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.docker-test.result == 'success'
      run: |
        echo "✅ All FanCode SDET tests passed successfully!"
        echo "Security scan: ${{ needs.security-scan.result }}"
        
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.docker-test.result == 'failure'
      run: |
        echo "❌ Some FanCode SDET tests failed. Check the reports for details."
        echo "Test result: ${{ needs.test.result }}"
        echo "Docker test result: ${{ needs.docker-test.result }}"
        echo "Security scan result: ${{ needs.security-scan.result }}"
        exit 1