name: FanCode SDET Tests

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install Allure CLI
        curl -o allure-commandline.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -zxf allure-commandline.tgz -C /opt/
        sudo ln -s /opt/allure-2.24.0/bin/allure /usr/bin/allure
        
    - name: Run tests
      run: |
        mkdir -p reports
        pytest -v --junitxml=reports/junit.xml --alluredir=reports/allure-results --clean-alluredir
      continue-on-error: true

    - name: Generate Allure report
      if: always()
      run: |
        allure generate reports/allure-results -o reports/allure-report --clean
      continue-on-error: true

    - name: Create compressed report archive
      if: always()
      run: |
        cd reports
        tar -czf allure-report.tar.gz allure-report/
        ls -la
      continue-on-error: true

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: reports/
        retention-days: 7

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Tests (Python ${{ matrix.python-version }})
        path: reports/junit.xml
        reporter: java-junit
        fail-on-error: false

  docker-test:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip on scheduled runs
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Build and test with Docker
      run: |
        mkdir -p reports
        docker build -t fancode-sdet .
        docker run --rm -v $(pwd)/reports:/app/reports fancode-sdet || true
        
    - name: Install Allure CLI for Docker reports
      if: always()
      run: |
        # Install Allure CLI to generate reports from Docker test results
        curl -o allure-commandline.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
        tar -zxf allure-commandline.tgz -C /opt/
        sudo ln -s /opt/allure-2.24.0/bin/allure /usr/bin/allure
        allure --version
      continue-on-error: true
        
    - name: Generate Docker Allure report
      if: always()
      run: |
        cd reports
        if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
          echo "Generating Allure report from Docker test results..."
          allure generate allure-results -o docker-allure-report --clean
          tar -czf docker-allure-report.tar.gz docker-allure-report/
          echo "Docker Allure report generated successfully"
        else
          echo "No Docker allure-results found or directory is empty"
        fi
        ls -la
      continue-on-error: true
        
    - name: Upload Docker reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-reports
        path: reports/
        retention-days: 7

  notify:
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    if: always()
    steps:
      - name: Download test reports
        uses: actions/download-artifact@v4
        with:
          name: test-reports-3.11
          path: reports/
      - name: Download docker reports
        uses: actions/download-artifact@v4
        with:
          name: docker-reports
          path: reports/docker/
        continue-on-error: true
      
      - name: Prepare safe email attachments
        run: |
          echo "=== Preparing Email-Safe Attachments ==="
          
          # Create a safe report summary instead of binary attachments
          mkdir -p email-reports
          
          # Create text summary of reports
          cat > email-reports/test-summary.txt << 'EOF'
          FanCode SDET Test Execution Summary
          ==================================
          
          Main Test Suite: ${{ needs.test.result }}
          Docker Test Suite: ${{ needs.docker-test.result }}
          Workflow: ${{ github.workflow }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Run #: ${{ github.run_number }}
          
          Reports Available in GitHub Actions Artifacts:
          - allure-report.tar.gz (Main test suite)
          - docker-allure-report.tar.gz (Docker test suite)
          - junit.xml (CI/CD integration)
          
          To access reports:
          1. Visit: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          2. Download artifacts from the "Artifacts" section
          3. Extract and open allure-report/index.html in your browser
          
          Generated: $(date)
          EOF
          
          # Copy JUnit XML as safe attachment (if exists)
          if [ -f "reports/junit.xml" ]; then
            cp reports/junit.xml email-reports/junit-results.xml
            echo "JUnit XML copied for email attachment"
          fi
          
          # Create links file instead of binary attachments
          cat > email-reports/report-links.txt << 'EOF'
          Direct Download Links:
          =====================
          
          GitHub Actions Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Available Artifacts:
          - test-reports-3.11 (Main test reports)
          - docker-reports (Docker test reports)
          
          Instructions:
          1. Click the GitHub Actions Run link above
          2. Scroll down to "Artifacts" section
          3. Download the report archives
          4. Extract and open allure-report/index.html
          EOF
          
          ls -la email-reports/
          echo "=== Email-Safe Attachments Prepared ==="
      - name: Notify workflow completion
        run: |
          echo "FanCode SDET workflow completed."
          echo "Test job status: ${{ needs.test.result }}"
          echo "Docker-test job status: ${{ needs.docker-test.result }}"
      - name: Send comprehensive test report via email
        uses: dawidd6/action-send-mail@v3
        if: always()
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: FanCode SDET Test Results - Run ${{ github.run_number }} [${{ needs.test.result }}]
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            FanCode SDET Test Execution Completed
            =====================================
            
            Test Results Summary:
            - Main Test Suite: ${{ needs.test.result }}
            - Docker Test Suite: ${{ needs.docker-test.result }}
            - Workflow: ${{ github.workflow }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            - Run Number: ${{ github.run_number }}
            
            Allure Reports Available:
            - Interactive HTML reports with test analytics
            - Test execution timeline and categorization
            - Detailed test steps with environment information
            - Historical trends and failure analysis
            
            How to Access Reports:
            1. Visit GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            2. Download artifacts from the "Artifacts" section:
               * test-reports-3.11 (Main test suite)
               * docker-reports (Docker test suite)
            3. Extract downloaded files
            4. Open allure-report/index.html in your browser
            
            Alternative Access:
            - JUnit XML results attached for CI/CD integration
            - Text summary attached with direct links
            
            Generated by GitHub Actions
            Execution Time: ${{ github.event.head_commit.timestamp }}
          attachments: |
            email-reports/junit-results.xml
            email-reports/test-summary.txt
            email-reports/report-links.txt
      - name: Deploy reports to GitHub Pages (optional)
        if: always() && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: reports/allure-report
          destination_dir: test-reports/${{ github.run_number }}
        continue-on-error: true
      
      - name: Create public report links
        if: always()
        run: |
          echo "=== Creating Public Report Links ==="
          
          # Add GitHub Pages link if deployed
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            cat >> email-reports/report-links.txt << 'EOF'
          
          GitHub Pages (Public Access):
          https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}/
          EOF
          fi
          
          # Update summary with additional access methods
          cat >> email-reports/test-summary.txt << 'EOF'
          
          Additional Access Methods:
          - GitHub Actions Artifacts (requires GitHub account)
          - GitHub Pages (public, if available)
          - Direct download from workflow run
          EOF
          
          echo "=== Public Report Links Created ==="